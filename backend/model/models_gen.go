// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type UpdateUserOrErrorPayload interface {
	IsUpdateUserOrErrorPayload()
}

type DeleteUserInput struct {
	ID int `json:"id"`
}

type ErrorPayload struct {
	Message string `json:"message"`
}

func (ErrorPayload) IsUpdateUserOrErrorPayload() {}

type UpdateUserInput struct {
	ID   int                  `json:"id"`
	Data *UpdateUserInputData `json:"data"`
}

type UpdateUserInputData struct {
	Email string  `json:"email"`
	Name  *string `json:"name"`
	Phone *string `json:"phone"`
	Sex   *Gender `json:"sex"`
}

type UpdateUserPayload struct {
	Data *User `json:"data"`
}

func (UpdateUserPayload) IsUpdateUserOrErrorPayload() {}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOther  Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
