// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package updateuser

import (
	"backend/model"
	"context"
	"sync"
)

// Ensure, that EnvMock does implement Env.
// If this is not the case, regenerate this file with moq.
var _ Env = &EnvMock{}

// EnvMock is a mock implementation of Env.
//
// 	func TestSomethingThatUsesEnv(t *testing.T) {
//
// 		// make and configure a mocked Env
// 		mockedEnv := &EnvMock{
// 			GetUserByIDFunc: func(ctx context.Context, id int) (*model.User, error) {
// 				panic("mock out the GetUserByID method")
// 			},
// 			UpdateUserFunc: func(ctx context.Context, data *model.User) error {
// 				panic("mock out the UpdateUser method")
// 			},
// 		}
//
// 		// use mockedEnv in code that requires Env
// 		// and then make assertions.
//
// 	}
type EnvMock struct {
	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, id int) (*model.User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, data *model.User) error

	// calls tracks calls to the methods.
	calls struct {
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data *model.User
		}
	}
	lockGetUserByID sync.RWMutex
	lockUpdateUser  sync.RWMutex
}

// GetUserByID calls GetUserByIDFunc.
func (mock *EnvMock) GetUserByID(ctx context.Context, id int) (*model.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("EnvMock.GetUserByIDFunc: method is nil but Env.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockedEnv.GetUserByIDCalls())
func (mock *EnvMock) GetUserByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *EnvMock) UpdateUser(ctx context.Context, data *model.User) error {
	if mock.UpdateUserFunc == nil {
		panic("EnvMock.UpdateUserFunc: method is nil but Env.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data *model.User
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, data)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedEnv.UpdateUserCalls())
func (mock *EnvMock) UpdateUserCalls() []struct {
	Ctx  context.Context
	Data *model.User
} {
	var calls []struct {
		Ctx  context.Context
		Data *model.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
